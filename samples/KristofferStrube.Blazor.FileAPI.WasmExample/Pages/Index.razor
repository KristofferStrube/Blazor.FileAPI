@page "/"
@implements IDisposable

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IURLServiceInProcess URL

<PageTitle>FileAPI - Index</PageTitle>

<h2>Loading an image as a Blob</h2>
In this sample we download an image using the <code>HttpClient</code> and create a new <code>File</code> from that.
Using the methods from the <code>URL</code> interface we construct a <code>Blob URL</code> for the image and use that as the source for the img-tag below.
<br />
<img src="@blobURL" style="max-width:100%; max-height:50vh;" />
<br />
file name: @file?.Name
<br />
last modified: @file?.LastModified
<br />
content type: @file?.Type


@code {
    private string blobURL = "";
    private FileInProcess? file;

    protected override async Task OnInitializedAsync()
    {
        var imageName = "mountain.jpg";

        var imageBytes = await HttpClient.GetByteArrayAsync($"images/{imageName}");
        file = await FileInProcess.CreateAsync(
            JSRuntime,
            fileBits: new BlobPart[] { imageBytes },
            fileName: imageName,
            options: new() { Type = "image/png", LastModified = DateTime.Now }
        );
        blobURL = URL.CreateObjectURL(file);
    }

    public void Dispose()
    {
        URL.RevokeObjectURL(blobURL);
    }
}