@page "/FileReaderSample"
@using System.Text
@implements IAsyncDisposable

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<PageTitle>FileAPI - FileReader</PageTitle>

<h2>Using the FileReader to load an image in different ways.</h2>
In this sample we download an image using the <code>HttpClient</code> and create a new <code>Blob</code> from that.
We then use the methods of the <code>FileReader</code> interface to read the <code>Blob</code> in different ways and convert those different results to an image.
<br />
<div class="m-1">
    <button class="btn btn-primary" @onclick=ReadAsArrayBufferAsync>Read as byte array</button>
    <button class="btn btn-primary" @onclick=ReadAsArrayBufferInProcessAsync>Read as byte array InProcess</button>
    <button class="btn btn-primary" @onclick=ReadAsBinaryStringAsync>Read as binary string</button>
    <button class="btn btn-primary" @onclick=ReadAsText>Read as text</button>
    <button class="btn btn-primary" @onclick=ReadAsDataURLAsync>Read as data URL</button>
</div>
<textarea @bind=@log style="height:30vh;width:100%;">
</textarea>
<br />
<img src="@imageUrl" style="max-width:100%; max-height:30vh;" />

@code {
    string log = "";
    private string imageUrl = "";
    private Blob? blob;

    protected override async Task OnInitializedAsync()
    {
        var imageBytes = await HttpClient.GetByteArrayAsync($"images/mountain.jpg");
        blob = await Blob.CreateAsync(
            JSRuntime,
            blobParts: new BlobPart[] { imageBytes },
            options: new() { Type = "image/png" }
        );
    }

    private void GetProgress(ProgressEventInProcess eventArgs, string prepend)
    {
        var progress = eventArgs.LengthComputable ? $"({eventArgs.Loaded}/{eventArgs.Total})" : "";
        log += $"{prepend}: {progress}\n";
        StateHasChanged();
    }


    private async Task GetProgressAsync(ProgressEvent eventArgs, string prepend)
    {
        var progress = await eventArgs.GetLengthComputableAsync() ? $"({await eventArgs.GetLoadedAsync()}/{await eventArgs.GetTotalAsync()})" : "";
        log += $"{prepend}: {progress}\n";
        StateHasChanged();
    }

    public async Task ReadAsArrayBufferAsync()
    {
        log = "";
        var fileReader = await FileReader.CreateAsync(JSRuntime);
        fileReader.OnLoadStart = async (e) => await GetProgressAsync(e, "OnLoadStart");
        fileReader.OnProgress = async (e) => await GetProgressAsync(e, "OnProgress");
        fileReader.OnLoad = async (e) => await GetProgressAsync(e, "OnLoad");
        fileReader.OnAbort = async (e) => await GetProgressAsync(e, "OnAbort");
        fileReader.OnError = async (e) => await GetProgressAsync(e, "OnError");
        fileReader.OnLoadEnd = async (e) =>
        {
            imageUrl = "data:image/png;base64," + Convert.ToBase64String(await fileReader.GetResultAsByteArrayAsync() ?? new byte[0]);
            await GetProgressAsync(e, "OnLoadEnd");
        };
        await fileReader.ReadAsArrayBufferAsync(blob!);
    }

    public async Task ReadAsArrayBufferInProcessAsync()
    {
        log = "";
        var fileReader = await FileReaderInProcess.CreateAsync(JSRuntime);
        fileReader.OnLoadStart = (e) => GetProgress(e, "OnLoadStart");
        fileReader.OnProgress = (e) => GetProgress(e, "OnProgress");
        fileReader.OnLoad = (e) => GetProgress(e, "OnLoad");
        fileReader.OnAbort = (e) => GetProgress(e, "OnAbort");
        fileReader.OnError = (e) => GetProgress(e, "OnError");
        fileReader.OnLoadEnd = (e) =>
        {
            imageUrl = "data:image/png;base64," + Convert.ToBase64String(fileReader.ResultAsByteArray ?? new byte[0]);
            GetProgress(e, "OnLoadEnd");
        };
        fileReader.ReadAsArrayBuffer(blob!);
    }

    public async Task ReadAsBinaryStringAsync()
    {
        log = "";
        var fileReader = await FileReader.CreateAsync(JSRuntime);
        fileReader.OnLoadStart = async (e) => await GetProgressAsync(e, "OnLoadStart");
        fileReader.OnProgress = async (e) => await GetProgressAsync(e, "OnProgress");
        fileReader.OnLoad = async (e) => await GetProgressAsync(e, "OnLoad");
        fileReader.OnAbort = async (e) => await GetProgressAsync(e, "OnAbort");
        fileReader.OnError = async (e) => await GetProgressAsync(e, "OnError");
        fileReader.OnLoadEnd = async (e) =>
        {
            var bytes = (await fileReader.GetResultAsStringAsync() ?? "").Select(c => (byte)c).ToArray();
            imageUrl = "data:image/png;base64," + Convert.ToBase64String(bytes);
            await GetProgressAsync(e, "OnLoadEnd");
        };
        await fileReader.ReadAsBinaryStringAsync(blob!);
    }

    public void ReadAsText()
    {
        log = "We can't read an image as text. ;)";
        imageUrl = "";
        StateHasChanged();
    }

    public async Task ReadAsDataURLAsync()
    {
        log = "";
        var fileReader = await FileReader.CreateAsync(JSRuntime);
        fileReader.OnLoadStart = async (e) => await GetProgressAsync(e, "OnLoadStart");
        fileReader.OnProgress = async (e) => await GetProgressAsync(e, "OnProgress");
        fileReader.OnLoad = async (e) => await GetProgressAsync(e, "OnLoad");
        fileReader.OnAbort = async (e) => await GetProgressAsync(e, "OnAbort");
        fileReader.OnError = async (e) => await GetProgressAsync(e, "OnError");
        fileReader.OnLoadEnd = async (e) =>
        {
            imageUrl = await fileReader.GetResultAsStringAsync() ?? "";
            await GetProgressAsync(e, "OnLoadEnd");
        };
        await fileReader.ReadAsDataURLAsync(blob!);
    }

    public async ValueTask DisposeAsync()
    {
        if (blob is not null)
        {
            await blob.DisposeAsync();
        }
    }
}